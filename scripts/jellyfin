#!/bin/bash

###############################################################################
# FUNCTIONS                                                                   #
###############################################################################

Backup()
{
   Has_sudo
   # Backup /opt/jellyfin to passed directory
   backupDirectory=$1
   tarPath=
   fileName=jellyfin-backup.tar
   mkdir /opt/jellyfin/backup
   cp /bin/jellyfin /opt/jellyfin/backup/
   cp /etc/jellyfin.conf /opt/jellyfin/backup/
   cp /usr/lib/systemd/system/jellyfin.service /opt/jellyfin/backup/
   if [[ $(echo "${backupDirectory: -1}") == "/" ]]; then
      tarPath=$backupDirectory$fileName
      echo $tarPath
   else
      tarPath=$backupDirectory/$fileName
      echo $tarPath
   fi

   time tar cvf $tarPath /opt/jellyfin
   USER=$(stat -c '%U' $backupDirectory)
   chown -f $USER:$USER $tarPath
   chmod -f 770 $tarPath
   echo "Your backup is: $tarPath"
   tarSize=$(du -h $tarPath)
   echo "Size: $tarSize"
   echo
   echo "To Import on your next setup, simply run:"
   echo "git clone https://github.com/Smiley-McSmiles/jellyfin-cli"
   echo "cd jellyfin-cli"
   echo "chmod ug+x setup.sh"
   echo "sudo ./setup.sh -i [Path to jellyfin-backup.tar]"
}

Check_Version()
{
   source /opt/jellyfin/config/jellyfin.conf
   if [ $jellyfin == $currentVersion ];then
      echo "The installed version of Jellyfin matches the newest version available."
      echo "$currentVersion"
      exit
   else
      echo "Newer Jellyfin version found..."
   fi
}

Check_disk_free()
{
   source /opt/jellyfin/config/jellyfin.conf
   if [[ $defaultPath != /* ]]; then 
	   echo "No default directory found..."
	   echo "Please enter the root directory for your Media Library..."
	   read defaultPath
	   sed -i -e "s|defaultPath=.*|defaultPath=$defaultPath|g" /opt/jellyfin/config/jellyfin.conf
	   df -h $defaultPath
   else 
	   df -h $defaultPath
   fi
}

Get_version()
{
   Has_sudo
   source /opt/jellyfin/config/jellyfin.conf
   echo "$currentVersion"
}

Version_switch()
{
   echo "Current Jellyfin version installed"
   Get_version
   echo ""
   echo "Jellyfin versions available:"
   ls /opt/jellyfin/ | grep "_" | cat -n
   echo ""
   echo "Please enter the number corresponding with"
   read -p "the version you want to install : " newVersionNumber
   newVersion=$(ls /opt/jellyfin/ | grep "_" | head -n $newVersionNumber | tail -n 1)
   maxNumber=$(ls /opt/jellyfin/ | grep "_" | wc -l)
   if (( $newVersionNumber > $maxNumber )); then
      echo "The new version you chose doesn't exist, please run this command again and pick a listed number"
      exit
   else
      jellyfin -S
      unlink /opt/jellyfin/jellyfin
      ln -s /opt/jellyfin/$newVersion /opt/jellyfin/jellyfin
      chown -Rfv $defaultUser:$defaultUser /opt/jellyfin/jellyfin
      sed -i -e "s|currentVersion=.*|currentVersion=$newVersion|g" /opt/jellyfin/config/jellyfin.conf
      jellyfin -s
   fi
}

Help()
{
   # Display Help
   echo "jellyfin - The CLI Tool"
   echo "-Created by Smiley McSmiles"
   echo 
   echo "Syntax: jellyfin -[b|d|e|h|i|p|r|s|S|u|U|ub|v|vs|X] [OPTIONS]"
   echo "options:"
   echo "-b     [DIRECTORY] Input directory to output backup archive"
   echo "-d     Disable Jellyfin on System Start"
   echo "-e     Enable Jellyfin on System Start"
   echo "-h     Print this Help"
   echo "-i     [FILE.tar] Input file to Import jellyfin-backup.tar"
   echo "-p     Reset the permissions of Jellyfin's Media Library"
   echo "-r     Restart Jellyfin"
   echo "-s     Start Jellyfin"
   echo "-S     Stop Jellyfin"
   echo "-t     Status of Jellyfin"
   echo "-u     Update Jellyfin"
   echo "-U     Update Jellyfin - The CLI Tool"
   echo "-ub    Update Jellyfin to the most recent Beta"
   echo "-v     Get the current installed version of Jellyfin"
   echo "-vs    Switch Jellyfin version for another previously installed version."
   echo "-X     Uninstall Jellyfin Completely"
   echo
}

Import()
{
   Has_sudo
   #Import jellyfin-backup.tar
   importTar=$1
   echo "******WARNING******"
   echo "******CAUTION******"
   echo "This procedure should only be used as a fresh install of Jellyfin."
   echo "As this procedure will erase /opt/jellyfin COMPLETELY."
   sleep 5
   read -p "...Continue? [yes/No] :" importOrNotToImport
   if [[ $importOrNotToImport == [yY][eE][sS] ]]; then
      echo "IMPORTING $importTar"
      jellyfin -S
      rm -rf /opt/jellyfin
      tar xvf $importTar -C /
      clear
      source /opt/jellyfin/config/jellyfin.conf
      mv -f /opt/jellyfin/backup/jellyfin /bin/
      chmod +x /bin/jellyfin
      mv -f /opt/jellyfin/backup/jellyfin.service /usr/lib/systemd/system/
      mv -f /opt/jellyfin/backup/jellyfin.conf /etc/
      if id "$defaultUser" &>/dev/null; then 
         chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
         chmod -Rfv 770 /opt/jellyfin
         jellyfin -s -t
      else
         clear
         echo "******WARNING******"
         echo "*******ERROR*******"
         echo "The imported default Jellyfin user($defaultUser) has not yet been created."
         echo "This error is likely due to a read error of the /opt/jellyfin/config/jellyfin.conf file."
         echo "The default user is usually created by Jellyfin - The CLI Tool, when running setup.sh."
         echo "You may want to see who owns that configuration file with:"
         echo "'ls /opt/jellyfin/config/jellyfin.conf'"
         sleep 5
         read -p "...Continue with $defaultUser? [yes/No] :" newUserOrOld
         if [[ $newUserOrOld == [yY][eE][sS] ]]; then
            echo "Great!"
            sleep .5
            chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
            chmod -Rfv 770 /opt/jellyfin
            jellyfin -s -t
         else
            read -p "No? Which user should own /opt/jellyfin?: " defaultUser
            echo "Well... I should've known $defaultUser would be the one..."
            sleep 1
            chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
            chmod -Rfv 770 /opt/jellyfin
            jellyfin -s -t
         fi
      fi

   else
      echo "Returning..."
   fi    
}

Permissions()
{
   Has_sudo
   #Check if there is a recorded media library path for chown and chmod:
   if [[ $defaultPath != /* ]]; then 
	   echo "No default directory found..."
	   echo "Please enter the root directory for your Media Library..."
	   read defaultPath
	   sed -i -e "s|defaultPath=.*|defaultPath=$defaultPath|g" /opt/jellyfin/config/jellyfin.conf
   else 
	   echo "defaultPath is set to $defaultPath";
   fi
   #Check if there is a recorded user/group for chown and chmod:
   if id "$defaultUser" &>/dev/null; then
	   echo "defaultUser is set to $defaultUser"
   else
	   echo "No default user found..."
	   echo "Please enter the owner for this directory..."
	   read defaultUser
	   sed -i -e "s|defaultUser=.*|defaultUser=$defaultUser|g" /opt/jellyfin/config/jellyfin.conf
   fi

   chown -Rfv $defaultUser:$defaultUser $defaultPath
   chmod 770 $defaultPath;
}

Update()
{
   Has_sudo
   echo "Fetching newest Jellyfin version..."
   mkdir /opt/jellyfin/update
   wget -O /opt/jellyfin/update/index.html https://repo.jellyfin.org/releases/server/linux/stable/combined/
   jellyfin_archive=$(grep 'amd64.tar.gz"' /opt/jellyfin/update/index.html | cut -d '"' -f 2)
   jellyfin=$(echo $jellyfin_archive | sed -r 's/_amd64.tar.gz//g')
   new_jellyfin_version=$(echo $jellyfin | sed -r 's/jellyfin_//g')
   rm -f /opt/jellyfin/update/index.html
   Check_Version
   wget -O /opt/jellyfin/update/$jellyfin_archive https://repo.jellyfin.org/releases/server/linux/stable/combined/$jellyfin_archive

   echo "Unpacking $jellyfin_archive to /opt/jellyfin/..."
   tar xvzf /opt/jellyfin/update/$jellyfin_archive -C /opt/jellyfin/
   jellyfin -S
   unlink /opt/jellyfin/jellyfin
   ln -s /opt/jellyfin/$jellyfin /opt/jellyfin/jellyfin
   echo "moving $jellyfin_archive to /opt/jellyfin/old/$jellyfin_archive"
   mv -v /opt/jellyfin/update/$jellyfin_archive /opt/jellyfin/old/
   rm -rfv /opt/jellyfin/update

   chown -R $defaultUser:$defaultUser /opt/jellyfin
   echo "Jellyfin updated to version $new_jellyfin_version"
   sed -i -e "s|currentVersion=.*|currentVersion=$jellyfin|g" /opt/jellyfin/config/jellyfin.conf
   jellyfin -s -t
}


Update_beta()
{
   Has_sudo
   echo "Fetching newest Jellyfin version..."
   mkdir /opt/jellyfin/update
   wget -O /opt/jellyfin/update/index.html https://repo.jellyfin.org/releases/server/linux/stable-pre/
   jellyfin_archive=$(grep 'amd64.tar.gz' /opt/jellyfin/update/index.html | grep 'combined' | cut -d '/' -f5 | cut -d '<' -f1 | head -n 1)
   jellyfin=$(echo $jellyfin_archive | sed -r 's/_amd64.tar.gz//g')
   new_jellyfin_version=$(echo $jellyfin | sed -r 's/jellyfin_//g')
   rm -f /opt/jellyfin/update/index.html
   Check_Version
   wget -O /opt/jellyfin/update/$jellyfin_archive https://repo.jellyfin.org/releases/server/linux/stable-pre/$new_jellyfin_version/combined/$jellyfin_archive

   echo "Unpacking $jellyfin_archive to /opt/jellyfin/..."
   tar xvzf /opt/jellyfin/update/$jellyfin_archive -C /opt/jellyfin/
   jellyfin -S
   unlink /opt/jellyfin/jellyfin
   ln -s /opt/jellyfin/$jellyfin /opt/jellyfin/jellyfin
   echo "moving $jellyfin_archive to /opt/jellyfin/old/$jellyfin_archive"
   mv -v /opt/jellyfin/update/$jellyfin_archive /opt/jellyfin/old/
   rm -rfv /opt/jellyfin/update

   chown -R $defaultUser:$defaultUser /opt/jellyfin
   echo "Jellyfin updated to version $new_jellyfin_version"
   sed -i -e "s|currentVersion=.*|currentVersion=$jellyfin|g" /opt/jellyfin/config/jellyfin.conf
   jellyfin -s -t
}

Uninstall()
{
   Has_sudo
   echo "******WARNING******"
   echo "******CAUTION******"
   echo "Are you completely sure?"
   echo "This will delete all files relating to Jellyfin, except"
   echo "the Media Library and jellyfin-backup.tar"
   read -p "CONTINUE?: [yes/No]" toUninstallOrNotToUninstall
   if [[ $toUninstallOrNotToUninstall == [yY][eE][sS] ]]; then
      echo "Goodbye..."
      sleep 1
      source /opt/jellyfin/config/jellyfin.conf
      rm -rfv /opt/jellyfin
      rm -fv /etc/jellyfin.conf
      rm -fv /bin/jellyfin
      userdel -f $defaultUser
   else
      echo "Phew! That was a close one!"
   fi
}

Update-cli()
{
   Has_sudo
   echo "Updating Jellyfin - The CLI Tool"
   git clone https://github.com/Smiley-McSmiles/jellyfin-cli
   cp -f jellyfin-cli/scripts/jellyfin /usr/bin/
   cp -f jellyfin-cli/jellyfin.1 /usr/local/share/man/man1/
   rm -rf jellyfin-cli
   echo "...complete"
}

Has_sudo()
{
   has_sudo_access=""
   `timeout -k .1 .1 bash -c "sudo /bin/chmod --help" >&/dev/null 2>&1` >/dev/null 2>&1
   if [ $? -eq 0 ];then
      has_sudo_access="YES"
      source /opt/jellyfin/config/jellyfin.conf
   else
      has_sudo_access="NO"
	   echo "$USER, you're not using sudo..."
      echo "Please use 'sudo jellyfin -[b|d|e|h|i|p|r|s|S|u|U|ub|v|X] [OPTIONS]'"
	   exit
   fi
}

###############################################################################
# FUNCTIONS END                                                               #
###############################################################################


###############################################################################
# MAIN                                                                        #
###############################################################################
if [ -n "$1" ]; then
   total=1
   while [ -n "$1" ]; do
      case "$1" in
         -b) Backup $2
             shift ;;
         -d) systemctl disable jellyfin.service ;;
         -e) systemctl enable jellyfin.service ;;
         -h) Help ;;
         -i) Import $2
             shift;;
         -p) Permissions ;;
         -r) systemctl restart jellyfin.service ;;
         -s) systemctl start jellyfin.service ;;
         -S) systemctl stop jellyfin.service ;;
         -t) clear && Check_disk_free && systemctl status jellyfin.service ;;
         -u) Update ;;
         -U) Update-cli ;;
         -ub) Update_beta ;;
	 -v) Get_version ;;
	 -vs) Version_switch ;;
         -X) Uninstall ;;
         *) echo "Option $1 not recognized" 
            Help ;;
      esac
      shift
   done
else
	echo "No parameters found."
	Help
	exit
fi

###############################################################################
# MAIN END                                                                    #
###############################################################################
